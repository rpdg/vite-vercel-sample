var Y=Object.defineProperty;var v=(i,e,t)=>e in i?Y(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var r=(i,e,t)=>(v(i,typeof e!="symbol"?e+"":e,t),t);import{p,U as E,b as g,g as w,R as M}from"./index.b3532ad9.js";import{B as T,l as D}from"./@rpdg.2a67823e.js";import{h as c}from"./moment.29305b8e.js";var N=Object.defineProperty,G=Object.getOwnPropertyDescriptor,B=(i,e,t,l)=>{for(var n=l>1?void 0:l?G(e,t):e,a=i.length-1,u;a>=0;a--)(u=i[a])&&(n=(l?u(e,t,n):u(n))||n);return l&&n&&N(e,t,n),n};const R={Red:"#AB2B2F",Blue:"#2878FF",Yellow:"#F0B422",Black:"#020202",Gray:"#CDCDCF",Green:"#76c583"};class C extends T{constructor(){super();r(this,"virtualMap");r(this,"virtualMapDetail");r(this,"physicalMap");r(this,"physicalMapDetail");r(this,"physicalMap2");r(this,"blockTimeSlots");r(this,"inited",!1);r(this,"loadedTimes",0);this.virtualMap=new Map,this.virtualMapDetail=new Map,this.physicalMap=new Map,this.physicalMapDetail=new Map,this.physicalMap2=new Map([["2023-09-12",new Map([["0911",[]],["1315",[]],["1517",[]]])],["2023-09-13",new Map([["0911",[]],["1315",[]],["1517",[]]])],["2023-09-14",new Map([["0911",[]],["1315",[]],["1517",[]]])]])}async addBlockTime(e){return e.Type>0&&(e.BeginDateTime=e.BeginDateTime.substr(11,5),e.EndDateTime=e.EndDateTime.substr(11,5)),await p("NewQualifyDate/Add",e)}async getBlockTime(e){this.blockTimeSlots=await p("NewQualifyDate/list",{isOnline:e})}async delBlockTime(e){return await p("NewQualifyDate/remove",{id:e})}putColorNum(e,t,l,n,a,u,f){let y=e?this.virtualMap:this.physicalMap,s=E(t,g.minutesOffset,"YYYY-MM-DD");y.has(s)||y.set(s,[]);let o=y.get(s);o.includes(l)||o.push(l);let b=e?this.virtualMapDetail:this.physicalMapDetail;b.has(s)||b.set(s,[]);let d=b.get(s);n&&d.push({color:l,type:"unconfirmed",entry:n}),a&&d.push({color:l,type:"byMe",entry:a}),u&&d.push({color:l,type:"conference",entry:u}),f&&d.push({color:l,type:"byItb",entry:f})}putColorNum2(e,t,l,n,a,u,f){let y=this.physicalMap2,s=c(e).format("YYYY-MM-DD"),o=y.get(s);if(o){let b=c(e).isBetween(`${s} 09:00:00`,`${s} 12:00:00`,void 0,"[)"),d=c(e).isBetween(`${s} 13:00:00`,`${s} 15:00:00`,void 0,"[)"),S=c(e).isBetween(`${s} 15:00:00`,`${s} 17:00:00`,void 0,"[)"),h=o.get("");b&&(h=o.get("0911")),d&&(h=o.get("1315")),S&&(h=o.get("1517")),l&&h.push({color:t,type:"unconfirmed",entry:l}),n&&h.push({color:t,type:"byMe",entry:n}),a&&h.push({color:t,type:"conference",entry:a}),u&&h.push({color:t,type:"byItb",entry:u}),f&&h.push({color:t,type:"walkIn",entry:f})}}async getVirtualCalendar(e){let t=await p("NewSchedule/GetUserVirtualCalendar",e);++this.loadedTimes>1&&(this.inited=!0),t.conferenceList.forEach(l=>{l.type.toString()==="1"?this.putColorNum(!0,l.begindate,"Blue",null,null,l,null):this.putColorNum(!0,l.begindate,"Red",null,null,l,null)}),t.scheduleByMy.forEach(l=>{this.putColorNum(!0,l.begindate,"Black",null,l,null,null)}),t.scheduleByItb.forEach(l=>{this.putColorNum(!0,l.begindate,"Yellow",null,null,null,l)}),t.scheduleByUnConfirm.forEach(l=>{this.putColorNum(!0,l.begin_datetime,"Gray",l,null,null,null)})}async getPhysicalCalendar(e){let t=await p("NewSchedule/GetUserPhysicalExhibitionCalendar",e);++this.loadedTimes>1&&(this.inited=!0),t.conferenceList.forEach(l=>{l.type.toString()==="1"?this.putColorNum(!1,l.begindate,"Blue",null,null,l,null):this.putColorNum(!1,l.begindate,"Red",null,null,l,null)}),t.scheduleByMy.forEach(l=>{this.putColorNum(!1,l.begindate,"Black",null,l,null,null)}),t.scheduleByItb.forEach(l=>{this.putColorNum(!1,l.begindate,"Yellow",null,null,null,l)}),t.scheduleByUnConfirm.forEach(l=>{this.putColorNum(!1,l.begin_datetime,"Gray",l,null,null,null)})}async addSchedule(e){return await p("NewSchedule/AddInviteSchedule",e)}async getTextTip(e){let t=await w("Common/GetMapInfoByKey?key=calendar_tips");return e?t[0].value1:t[0].value2}async getSchedulesConference(){let e;return g.role===M.buyer?e=await w("schedule/GetBuyerSchedules"):g.role===M.exhibition&&(e=await w("schedule/GetExhibitionSchedules")),e}async getSchedules(){let e=c("2023-11-01");const t={beginDate:c(e).startOf("year").format("YYYY-MM-DD HH:mm:ss"),endDate:c(e).endOf("year").format("YYYY-MM-DD HH:mm:ss")};let l=await p("NewSchedule/GetUserPhysicalExhibitionCalendar",t);++this.loadedTimes>1&&(this.inited=!0),l.conferenceList.forEach(a=>{a.type.toString()==="1"?(a.begindate="2023-09-12 09:00:00",a.enddate="2023-09-12 12:00:00",this.putColorNum2(a.begindate,"Blue",null,null,a,null,null)):(a.begindate="2023-09-12 09:00:00",a.enddate="2023-09-12 12:00:00",this.putColorNum2(a.begindate,"Red",null,null,a,null,null))});let n;g.role===M.buyer?n=await w("schedule/GetBuyerSchedules"):g.role===M.exhibition&&(n=await w("schedule/GetExhibitionSchedules")),n.forEach(a=>{switch(a.type){case 1:this.putColorNum2(a.begindate,"Yellow",null,null,null,a,null);break;case 2:this.putColorNum2(a.begindate,"Black",null,a,null,null,null);break;case 3:this.putColorNum2(a.begindate,"Green",null,null,null,null,a);break}})}}B([D],C.prototype,"getVirtualCalendar",1);B([D],C.prototype,"getPhysicalCalendar",1);const x=new C,$=function(){return{calendarStore:x}};export{R as C,$ as u};
