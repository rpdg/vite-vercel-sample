var g=Object.defineProperty;var w=(n,l,a)=>l in n?g(n,l,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[l]=a;var s=(n,l,a)=>(w(n,typeof l!="symbol"?l+"":l,a),a);import{B as D,p as o,g as b,l as C}from"./index.a3ecc1aa.js";import{h as B}from"./moment.29305b8e.js";var v=Object.defineProperty,Y=Object.getOwnPropertyDescriptor,M=(n,l,a,e)=>{for(var t=e>1?void 0:e?Y(l,a):l,r=n.length-1,u;r>=0;r--)(u=n[r])&&(t=(e?u(l,a,t):u(t))||t);return e&&t&&v(l,a,t),t};const E={Red:"#AB2B2F",Blue:"#2878FF",Yellow:"#F0B422",Black:"#020202",Gray:"#CDCDCF"};class d extends D{constructor(){super();s(this,"virtualMap");s(this,"virtualMapDetail");s(this,"physicalMap");s(this,"physicalMapDetail");s(this,"blockTimeSlots");s(this,"inited",!1);s(this,"loadedTimes",0);this.virtualMap=new Map,this.virtualMapDetail=new Map,this.physicalMap=new Map,this.physicalMapDetail=new Map}async addBlockTime(l){return await o("NewQualifyDate/Add",l)}async getBlockTime(l){this.blockTimeSlots=await o("NewQualifyDate/list",{isOnline:l})}async delBlockTime(l){return await o("NewQualifyDate/remove",{id:l})}putColorNum(l,a,e,t,r,u,y){let c=l?this.virtualMap:this.physicalMap,i=B(a,["YYYY/MM/DD","YYYY-MM-DD"]).format("YYYY-MM-DD");c.has(i)||c.set(i,[]);let f=c.get(i);f.includes(e)||f.push(e);let h=l?this.virtualMapDetail:this.physicalMapDetail;h.has(i)||h.set(i,[]);let p=h.get(i);t&&p.push({color:e,type:"unconfirmed",entry:t}),r&&p.push({color:e,type:"byMe",entry:r}),u&&p.push({color:e,type:"conference",entry:u}),y&&p.push({color:e,type:"byItb",entry:y})}async getVirtualCalendar(l){let a=await o("NewSchedule/GetUserVirtualCalendar",l);++this.loadedTimes>1&&(this.inited=!0),a.conferenceList.forEach(e=>{e.type.toString()==="1"?this.putColorNum(!0,e.begindate,"Blue",null,null,e,null):this.putColorNum(!0,e.begindate,"Red",null,null,e,null)}),a.scheduleByMy.forEach(e=>{this.putColorNum(!0,e.begindate,"Black",null,e,null,null)}),a.scheduleByItb.forEach(e=>{this.putColorNum(!0,e.begindate,"Yellow",null,null,null,e)}),a.scheduleByUnConfirm.forEach(e=>{this.putColorNum(!0,e.begin_datetime,"Gray",e,null,null,null)})}async getPhysicalCalendar(l){let a=await o("NewSchedule/GetUserPhysicalExhibitionCalendar",l);++this.loadedTimes>1&&(this.inited=!0),a.conferenceList.forEach(e=>{e.type.toString()==="1"?this.putColorNum(!1,e.begindate,"Blue",null,null,e,null):this.putColorNum(!1,e.begindate,"Red",null,null,e,null)}),a.scheduleByMy.forEach(e=>{this.putColorNum(!1,e.begindate,"Black",null,e,null,null)}),a.scheduleByItb.forEach(e=>{this.putColorNum(!1,e.begindate,"Yellow",null,null,null,e)}),a.scheduleByUnConfirm.forEach(e=>{this.putColorNum(!1,e.begin_datetime,"Gray",e,null,null,null)})}async addSchedule(l){return await o("NewSchedule/AddInviteSchedule",l)}async getTextTip(l){let a=await b("Common/GetMapInfoByKey?key=calendar_tips");return l?a[0].value1:a[0].value2}}M([C],d.prototype,"getVirtualCalendar",1);M([C],d.prototype,"getPhysicalCalendar",1);const S=new d,P=function(){return{calendarStore:S}};export{E as C,P as u};
